{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf0 \CocoaLigature0 Initial data:\
  iii not tttt eee r not and jj r eee pp r sssss eee not tttt ooo ff m m y z $$ \
\
TEST OUT COPY CONSTRUTOR first(T)\
                        z\
                    y\
                tttt\
                        sssss\
                    r\
                        pp\
                            ooo\
            not\
                    m\
                jj\
        iii\
                ff\
            eee\
                and\
\
Test out operator= dup=T\
T printed out\
                        z\
                    y\
                tttt\
                        sssss\
                    r\
                        pp\
                            ooo\
            not\
                    m\
                jj\
        iii\
                ff\
            eee\
                and\
dup print out\
                        z\
                    y\
                tttt\
                        sssss\
                    r\
                        pp\
                            ooo\
            not\
                    m\
                jj\
        iii\
                ff\
            eee\
                and\
Tree Inorder:\
and eee ff iii jj m not ooo pp r sssss tttt y z \
                        z\
                    y\
                tttt\
                        sssss\
                    r\
                        pp\
                            ooo\
            not\
                    m\
                jj\
        iii\
                ff\
            eee\
                and\
Retrieve --> and:  found\
Retrieve --> not:  found\
Retrieve --> sss:  not found\
Height    --> and:  1\
Height    --> not:  5\
Height    --> sss:  0\
Height    --> tttt:  4\
Height    --> ooo:  1\
Height    --> y:  2\
Height    --> a:  0\
T == T2?     equal\
T != first?  equal\
T == dup?    equal\
Is T empty?   0\
array printed: and eee ff iii jj m not ooo pp r sssss tttt y z \
\
array to Binary tree printed below\
                    z\
                y\
                    tttt\
            sssss\
                    r\
                pp\
                    ooo\
        not\
                    m\
                jj\
                    iii\
            ff\
                    eee\
                and\
\
Print Binary Tree T after calling destructor should show nothing\
\
Print Binary Tree dup before calling destructor\
                        z\
                    y\
                tttt\
                        sssss\
                    r\
                        pp\
                            ooo\
            not\
                    m\
                jj\
        iii\
                ff\
            eee\
                and\
Print Binary Tree dup after destructor\
---------------------------------------------------------------\
Initial data:\
  b a c b a c $$ \
Tree Inorder:\
a b c \
            c\
        b\
            a\
Retrieve --> and:  not found\
Retrieve --> not:  not found\
Retrieve --> sss:  not found\
Height    --> and:  0\
Height    --> not:  0\
Height    --> sss:  0\
Height    --> tttt:  0\
Height    --> ooo:  0\
Height    --> y:  0\
Height    --> a:  1\
T == T2?     equal\
T != first?  not equal\
T == dup?    not equal\
Is T empty?   0\
array printed: a b c \
\
array to Binary tree printed below\
            c\
        b\
            a\
\
Print Binary Tree T after calling destructor should show nothing\
\
Print Binary Tree dup before calling destructor\
            c\
        b\
            a\
Print Binary Tree dup after destructor\
---------------------------------------------------------------\
Initial data:\
  c b a $$ \
Tree Inorder:\
a b c \
        c\
            b\
                a\
Retrieve --> and:  not found\
Retrieve --> not:  not found\
Retrieve --> sss:  not found\
Height    --> and:  0\
Height    --> not:  0\
Height    --> sss:  0\
Height    --> tttt:  0\
Height    --> ooo:  0\
Height    --> y:  0\
Height    --> a:  1\
T == T2?     equal\
T != first?  not equal\
T == dup?    not equal\
Is T empty?   0\
array printed: a b c \
\
array to Binary tree printed below\
            c\
        b\
            a\
\
Print Binary Tree T after calling destructor should show nothing\
\
Print Binary Tree dup before calling destructor\
        c\
            b\
                a\
Print Binary Tree dup after destructor\
---------------------------------------------------------------\
Initial data:\
}